class queue
	arr = []
	front = 0
	back = 0
	count = 0

	fn __init__(this, size)
		this.arr = [0] * size

	fn enqueue(this, item)
		if (type(item) == "iter")
			for i in item
				this.enqueue(i)
		else
			if (this.is_full())
				this.resize()

			this.arr[this.back] = item
			this.back = (this.back + 1) % len(this.arr)
			this.count += 1

	fn dequeue(this)
		assert(!this, "queue is empty")

		item = this.arr[this.front]
		this.front = (this.front + 1) % len(this.arr)
		this.count -= 1

		return item

	fn is_full(this)
		return this.count == len(this.arr)

	fn resize(this)
		resized = [0] * (2 * len(this.arr))
		j = this.front

		for i in range(0, this.count)
			resized[i] = this.arr[j]
			j = (j + 1) % len(this.arr)

		this.back = len(this.arr)
		this.front = 0
		this.arr = resized

	fn __add__(this, other)
		this.enqueue(other)
		return this

	fn __len__(this)
		return this.count

	fn __bool__(this)
		return this.count != 0

	fn __str__(this)
		text = "["

		i = this.front
		j = this.back

		for k in range(0, this.count)
			text += this.arr[i]
			i = (i + 1) % len(this.arr)
			if (k != this.count - 1)
				text += ", "
		
		text += "]"
		
		return text

	fn __iter__(this)
		enum = []
		i = this.front
		j = this.back

		for k in range(0, this.count)
			enum += this.arr[i]
			i = (i + 1) % len(this.arr)

		return enum