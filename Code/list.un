class list
	array = []
	count = 0

	fn __init__(this, item)
		if (type(item) == "iter")
			this.array = item
			this.count = len(item)
		else
			this.add(item)

	fn add(this, item)
		for i in [] + item
			if (len(this.array) == this.count)
				this.array += i 	
			else
				this.array[this.count] = i		

			this.count += 1

	fn get(this, index)   		
		return this.array[index]

	fn set(this, index, item)
		this.array[index] = item

	fn remove(this, item)
		for i in range(0, this.count)			
			if (this.array[i] == item)		
				return this.remove_at(i)	

		return False

	fn remove_at(this, index)
		if (this.count > 0)
			for i in range(index, this.count - index - 1)
				this.array[i] = this.array[i + 1]		

			this.count -= 1
			
			return True
		return False

	fn index_of(this, item)
		for i in range(0, this.count)
			if (this.array[i] == item)
				return i

		return -1
	
	fn contains(this, item)
		if (this.index_of(item) == -1)
			return False

		return True

	fn __add__(this, other)
		if (type(other) == "str")
			return str(this) + other		

		result = list(this.array)
		result.count = this.count
		result.add(other)

		return result

	fn __len__(this)
		return this.count

	fn __getitem__(this, index)
		return this.array[index]
	
	fn __setitem__(this, index, value)
		this.array[index] = value

		return this.array[index]

	fn __str__(this)
		text = "["

		for	i in range(0, this.count)
			text += str(this.array[i])
			if (i != len(this) - 1)
				text += ", "

		text += "]"

		return text