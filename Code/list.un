class list
	array = []
	count = 0

	fn __init__(key)
		this = key[0]
		item = key[1]

		if (type(item) == "iter")
			this.array = item
			this.count = len(item)
		else
			this.add(item)

	fn add(key)
		this = key[0]
		item = key[1]
		readln()

		for i in [] + item
			if (len(this.array) == this.count)
				this.array += i 	
			else
				this.array[this.count] = i
			
			this.count += 1

	fn get(key)   		
		this = key[0]
		index = key[1]

		return this.array[index]

	fn set(key)
		this = key[0]
		index = key[1][0]
		item = key[1][1]

		this.array[index] = item

	fn remove(key)
		this = key[0]
		item = key[1]				
		for i in range([0, this.count])
			if (this.array[i] == item)		
				return this.remove_at(i)	

		return False

	fn remove_at(key)
		this = key[0]
		index = key[1]

		if (this.count > 0)
			for i in range([index, this.count - index - 1])
				this.array[i] = this.array[i + 1]		

			this.count -= 1			
			return True
		return False

	fn index_of(key)
		this = key[0]
		item = key[1]

		for i in range([0, this.count])
			if (this.array[i] == item)
				return i

		return -1
	
	fn contains(key)
		this = key[0]
		item = key[1]

		if (this.index_of(item) == -1)
			return False

		return True

	fn __add__(key)
		this = key[0]
		item = key[1]

		if (type(item) == "str")
			return str(this) + item

		this.add(item)

		return this

	fn __len__(key)
		this = key[0]

		return this.count

	fn __get__(key)
		this = key[0]
		index = key[1]

		return this.array[index]
	
	fn __set__(key)
		this = key[0]
		index = key[1][0]
		value = key[1][1]

		this.array[index] = value

		return this.array[index]

	fn __str__(key)
		this = key[0]
		text = "["

		for	i in range([0, this.count])
			text += str(this.array[i])
			if (i != len(this) - 1)
				text += ", "

		text += "]"

		return text