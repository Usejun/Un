class vec3
	x = 0
	y = 0
	z = 0

	fn __init__(self, x, y, z)
		self.x = x
		self.y = y
		self.z = z
	
	fn __add__(self, other)
		return vec3(self.x + other.x, self.y + other.y, self.z + other.z)

	fn __sub__(self, other)
		return vec3(self.x - other.x, self.y - other.y, self.z - other.z)

	fn __mul__(self, other)
		return vec3(self.x * other.x, self.y * other.y, self.z * other.z)

	fn __div__(self, other)
		return vec3(self.x / other.x, self.y / other.y, self.z / other.z)

	fn __idiv__(self, other)
		return vec3(self.x // other.x, self.y // other.y, self.z // other.z)

	fn __mod__(self, other)
		return vec3(self.x % other.x, self.y % other.y, self.z % other.z)

	fn __or__(self, other)
		return vec3(self.x or other.x, self.y or other.y, self.z or other.z)

	fn __and__(self, other)
		return vec3(self.x and other.x, self.y and other.y, self.z and other.z)

	fn __xor__(self, other)
		return vec3(self.x xor other.x, self.y xor other.y, self.z xor other.z)

	fn __len__()
		return 3
	
	fn __type__()
		return "vec3"

	fn __str__(self)
		return "(" + self.x + ", " + self.y +  + ", " + self.z + ")"

	fn __int__(self)
		return int((self.x + self.y + self.z) / 3)

	fn __eq__(self, other)
		return self.x == other.x and self.y == other.y and self.z == other.z

	fn __lt__(self, other)
		return self.x == other.x or self.y == other.y or self.z == other.z
