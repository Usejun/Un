class stack
	arr = []
	count = 0

	fn __init__(self, size)
		self.arr = [0] * size

	fn push(self, item)
		if (type(item) == "list")
			for i in item
				self.push(i)
			self.count += len(item)
		else
			if (self.is_full())
				self.resize()

			self.arr[self.count] = item
			self.count += 1

	fn pop(self)
		assert(!self, "queue is empty")

		item = self.arr[self.count - 1]
		self.count -= 1

		return item

	fn is_full(self)
		return self.count == len(self.arr)

	fn resize(self)
		resized = [0] * (2 * len(self.arr))

		for i in range(0, self.count)
			resized[i] = self.arr[i]

		self.arr = resized

	fn __add__(self, other)
		self.push(other)
		return self

	fn __bool__(self)
		return self.count != 0

	fn __len__(self)
		return self.count

	fn __str__(self)
		text = "["

		for i in range(0, self.count)
			text += self.arr[self.count - i]
			if (i != self.count - 1)
				text += ", "

		text += "]"
		
		return text

	fn __list__(self)
		enum = []
		i = self.count

		for k in range(0, self.count + 1)
			enum += self.arr[i - k]

		return enum