class queue
	arr = []
	front = 0
	back = 0
	count = 0

	fn __init__(self, size)
		self.arr = [0] * size

	fn enqueue(self, item)
		if (type(item) == "iter")
			for i in item
				self.enqueue(i)
			self.count += len(item)
		else
			if (self.is_full())
				self.resize()

			self.arr[self.back] = item
			self.back = (self.back + 1) % len(self.arr)
			self.count += 1

	fn dequeue(self)
		assert(!self, "queue is empty")

		item = self.arr[self.front]
		self.front = (self.front + 1) % len(self.arr)
		self.count -= 1

		return item

	fn is_full(self)
		return self.count == len(self.arr)

	fn resize(self)
		resized = [0] * (2 * len(self.arr))
		j = self.front

		for i in range(0, self.count)
			resized[i] = self.arr[j]
			j = (j + 1) % len(self.arr)

		self.back = len(self.arr)
		self.front = 0
		self.arr = resized

	fn __add__(self, other)
		self.enqueue(other)
		return self

	fn __len__(self)
		return self.count

	fn __bool__(self)
		return self.count != 0

	fn __str__(self)
		text = "["

		i = self.front
		j = self.back

		for k in range(0, self.count)
			text += self.arr[i]
			i = (i + 1) % len(self.arr)
			if (k != self.count - 1)
				text += ", "
		
		text += "]"
		
		return text

	fn __iter__(self)
		enum = []
		i = self.front
		j = self.back

		for k in range(0, self.count)
			enum += self.arr[i]
			i = (i + 1) % len(self.arr)

		return enum