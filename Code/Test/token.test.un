class token
	t_type = none
	value = ""

	fn __init__(t_type, value)
		self.t_type = t_type
		self.value = value

	fn __str__()
		return `({self.t_type}, {self.value})`

enum token_type
	number, plus, minus

fn tokenize(line)
	line = line.split(" ")
	tokens = []

	for text in line
		if text.is_number()
			tokens += token(token_type.number, text)
		elif text == "+"
			tokens += token(token_type.plus, text)
		elif text == "-"
			tokens += token(token_type.minus, text)		

	return tokens

fn calculate(tokens)
	write(tokens)
	v = int(tokens[0].value)

	for i in range(1, len(tokens))
		if tokens[i].value.is_number()
			continue

		if tokens[i].t_type == token_type.plus
			v += int(tokens[i + 1].value)
		else
			v -= int(tokens[i + 1].value)

	return v

tokens = tokenize("1 + 2 + 4 - 8 + 16 + 32")
write(calculate(tokens))